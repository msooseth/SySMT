/*
Copyright (c) 2009, INRIA, Université de Nancy 2 and Universidade
Federal do Rio Grande do Norte.
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
   * Redistributions of source code must retain the above copyright
     notice, this list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright
     notice, this list of conditions and the following disclaimer in the
     documentation and/or other materials provided with the distribution.
   * Neither the name of the Université de Nancy 2 or the Universidade Federal
     do Rio Grande do Norte nor the names of its contributors may be used
     to endorse or promote products derived from this software without
     specific prior written permission.

THIS SOFTWARE IS PROVIDED BY INRIA, Université de Nancy 2 and
Universidade Federal do Rio Grande do Norte ''AS IS'' AND ANY EXPRESS
OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL INRIA, Université de Nancy 2 and
Universidade Federal do Rio Grande do Norte BE LIABLE FOR ANY DIRECT,
INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.

*/

/* ------------------------------------------------------------------- */

/* ------------------------------------------------------------------- */
#ifndef __TSTPFUN_H
#define __TSTPFUN_H

#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#include "general.h"

#include "DAG.h"
#include "hash.h"
#include "list.h"
#include "table.h"

#include "polarities.h"

#include "eprover-int.h"
#include "tstp-parser.h"

/* ------------------------------------------------------------------- */

extern FILE *tstp_in;
extern int tstp_lineno;

/* ------------------------------------------------------------------- */

extern const char SZS_STATUS_STR [];
extern const int SZS_STATUS_SZ;

/* DD the sort for terms */
extern Tsort e_sort;

/* ------------------------------------------------------------------- */

/**
   \brief parses TSTP file 
   \param filename the name of the file to parse
   
*/
extern void tstp_parse_file (char * filename);

/* ------------------------------------------------------------------- */

/**
   \brief executes the TSTP parser
   \note code generated by bison/flex from files tstp.y and tstp.lex.
*/
extern int  tstp_parse (void);

/**
   \brief TSTP parser error handler
   \note routine used in code generated by bison/flex.
*/
extern void tstp_error (char *s);

/* ------------------------------------------------------------------- */

/**
   \brief builds an equality, possibly negated.  
   \param left a term
   \param right a term
   \param polarity POL_POS or POL_NEG
   \return the DAG for the equality between left and right, possibly
   negated, according to polarity.
*/
extern TDAG tstp_equality (TDAG left, TDAG right, int polarity);

/**
   \brief builds a quantified formula
   \param q quantifier symbol
   \param vars list of quantified variables
   \param b the body of the quantified formula
   \return the DAG for the quantified formula
*/
extern TDAG tstp_quantified_formula (Tsymb q, Tlist * vars, TDAG b);

/**
   \brief action when a variable name appears in a binder
   \param name name of the variable (starts with uppercase letter)
   \return the DAG of the quantified variable
*/
extern TDAG tstp_quantified_variable (char * name);

/**
   \brief action when a variable name appears in an expression
   \return the DAG of the quantified variable
*/
extern TDAG tstp_expression_variable (char * name);

/**
   \brief action taken when a CNF formula is parsed in TSTP input
   \param list DAGs of the literals in the clause
   \return The DAG of the disjunction of the literals or the literal
   itself if the list has a unique element. 
   \note Destructive for list.
*/
extern TDAG tstp_cnf_formula (Tlist list);

/**
   \brief action taken when a binary operation is parsed in TSTP input
   \param c the connector 
   \param a1 the first argument
   \param a2 the second argument
   \return the DAG of the operation
   \note Since TSTP has operators that are
   not in the code logic of SMT-LIB, some rewriting might occur.
*/
extern TDAG tstp_binary_connective (Tbinary_connective c, TDAG a1, TDAG a2);

/**
   \brief Action taken when a disjunction is parsed 
   \param list The arguments of the disjunction
   \return The DAG of the disjunction
   \note Destructive for list
*/
extern TDAG tstp_or (Tlist list);

/**
   \brief Action taken when a disjunction is parsed 
   \param list The arguments of the disjunction
   \return The DAG of the disjunction
   \note Destructive for list
*/
extern TDAG tstp_and (Tlist list);

/**
   \brief Action when a comment starting with % is parsed
   \param comment The comment string
   \note Tests if the comment contains a string indicating the
   presence of the status according to the SZS ontology and, if so,
   sets a variable registering that status accordingly.
*/
extern void tstp_comment (char * comment);

/**
   \brief Action taken when a single quoted token is parsed
   \param quoted the quoted string, including quotes.
   \return contents of the quoted string, excluding quotes.
   \note Destructive for quoted.
*/
extern char* tstp_single_quoted (char * quoted);


/**
   \brief Action taken when an inference has been parsed.
   \param id the identifier for that inference
   \param role the kind of inference performed
   \param DAG the infered formula
   \param premisse premisse(s) of the inference 
*/
extern void tstp_inference (const uintptr_t id, const Trole role,
			    TDAG DAG, Tlist premisses);

extern TDAG tstp_function_term (Tsymb symb, Tlist list);

#endif
